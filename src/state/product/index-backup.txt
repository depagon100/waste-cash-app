import { createSlice } from '@reduxjs/toolkit';

import { IProductState } from '../../types';
import {
  addProduct,
  addProductOffer,
  createProduct,
  getProductData,
  getProductList,
  setProductData,
  setProductList,
  setProductError,
  setProductSuccess,
} from './actions-backup.text';

const initialState: IProductState = {
  isLoading: false,
  success: '',
  error: '',
  data: null,
  list: [],
};

export const productSlice = createSlice({
  name: 'product',
  initialState,
  reducers: {},
  extraReducers: {
    // Create Product
    [`${createProduct.pending}`]: (state) => ({
      ...state,
      isLoading: true,
    }),

    [`${createProduct.fulfilled}`]: (state) => ({
      ...state,
      isLoading: false,
    }),

    [`${createProduct.rejected}`]: (state, action) => ({
      ...state,
      error: action.payload,
      isLoading: false,
    }),

    // Get Product Data
    [`${getProductData.pending}`]: (state) => ({
      ...state,
      isLoading: true,
    }),

    [`${getProductData.fulfilled}`]: (state) => ({
      ...state,
      isLoading: false,
    }),

    [`${getProductData.rejected}`]: (state, action) => ({
      ...state,
      error: action.payload,
      isLoading: false,
    }),

    // Get Product List
    [`${getProductList.pending}`]: (state) => ({
      ...state,
      isLoading: true,
    }),

    [`${getProductList.fulfilled}`]: (state) => ({
      ...state,
      isLoading: false,
    }),

    [`${getProductList.rejected}`]: (state, action) => ({
      ...state,
      error: action.payload,
      isLoading: false,
    }),

    // Add Product
    [`${addProduct.type}`]: (state, action) => ({
      ...state,
      list: [action.payload, ...state.list],
    }),

    // addProductOffer
    [`${addProductOffer.type}`]: (state, action) => ({
      ...state,
      data: {
        ...state.data,
        offers: [...(state.data?.offers || []), action.payload],
      },
    }),

    // Set Product Data
    [`${setProductData.type}`]: (state, action) => ({
      ...state,
      data: action.payload,
    }),

    // Set Product List
    [`${setProductList.type}`]: (state, action) => ({
      ...state,
      list: action.payload,
    }),

    // Set Product Error
    [`${setProductError.type}`]: (state, action) => ({
      ...state,
      error: action.payload || '',
    }),

    // Set Product Success
    [`${setProductSuccess.type}`]: (state, action) => ({
      ...state,
      success: action.payload || '',
    }),
  },
});
